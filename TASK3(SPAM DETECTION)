# -*- coding: utf-8 -*-
"""Task 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_46yHckp29YOPFfjryuvBKkOKCxJY91u

Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.pipeline import Pipeline

df = pd.read_csv('/content/spam.csv',  encoding='iso-8859-1')
df.head()

"""Data Checking

"""

df.info()

df.isnull().sum()

df.describe()

"""Data Processing

"""

del df['Unnamed: 2']
del df['Unnamed: 3']
del df['Unnamed: 4']

df.rename(columns = {'v1':'Category', 'v2':'Message'}, inplace = True)

spam = df.groupby('Category')['Message'].count()
spam

label_encoder = preprocessing.LabelEncoder()
df['spam'] = label_encoder.fit_transform(df['Category'])
df.head()

"""Selecting Features

"""

x = df['Message']
y = df['spam']

"""Splitting of Data

"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=40)

v = CountVectorizer()

x_train_count = v.fit_transform(x_train.values)
x_train_count.toarray()[:3]

"""Model Implementaion and Selection

"""

model = MultinomialNB()

"""Training of Model

"""

model.fit(x_train_count, y_train)

"""Model Evaluations

"""

emails = ['Hey mohan, can we get together to watch footbal game tomorrow?',
          'Upto 20% discount on parking, exclusive offer just for you. Dont miss this reward!']
emails_count = v.transform(emails)
model.predict(emails_count)

x_test_count = v.transform(x_test)
model.predict(x_test_count)

model.score(x_test_count, y_test)

pred = model.predict(x_test_count)

cm = confusion_matrix(y_test, pred)
cm

clf = Pipeline([
    ('Vectorizer' , CountVectorizer()),
    ('nb' , MultinomialNB())
])

clf.fit(x_train, y_train)

clf.score(x_test, y_test)

pred2 = clf.predict(x_test)

cm2 = confusion_matrix(y_test, pred2)
cm2
